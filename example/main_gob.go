// Code generated by gobetter; DO NOT EDIT.

package example

import (
	"strings"
)

// PersonFirstNameArg represents field firstName of struct Person
type PersonFirstNameArg struct {
	Arg string
}

// PersonFirstName creates argument for field firstName
func PersonFirstName(arg string) PersonFirstNameArg {
	return PersonFirstNameArg{Arg: arg}
}

func (v Person) FirstName() string {
	return v.firstName
}

// PersonLastNameArg represents field lastName of struct Person
type PersonLastNameArg struct {
	Arg string
}

// PersonLastName creates argument for field lastName
func PersonLastName(arg string) PersonLastNameArg {
	return PersonLastNameArg{Arg: arg}
}

func (v Person) LastName() string {
	return v.lastName
}

// PersonAgeArg represents field Age of struct Person
type PersonAgeArg struct {
	Arg int
}

// PersonAge creates argument for field Age
func PersonAge(arg int) PersonAgeArg {
	return PersonAgeArg{Arg: arg}
}

// PersonZzArg represents field zz of struct Person
type PersonZzArg struct {
	Arg func(a1, a2 int, a3 *string) interface{}
}

// PersonZz creates argument for field zz
func PersonZz(arg func(a1, a2 int, a3 *string) interface{}) PersonZzArg {
	return PersonZzArg{Arg: arg}
}

func (v Person) Zz() func(a1, a2 int, a3 *string) interface{} {
	return v.zz
}

// PersonTestArg represents field test of struct Person
type PersonTestArg struct {
	Arg strings.Builder
}

// PersonTest creates argument for field test
func PersonTest(arg strings.Builder) PersonTestArg {
	return PersonTestArg{Arg: arg}
}

func (v Person) Test() strings.Builder {
	return v.test
}

// NewPerson creates new instance of Person struct
func NewPerson(
	argFirstName PersonFirstNameArg,
	argLastName PersonLastNameArg,
	argAge PersonAgeArg,
	argZz PersonZzArg,
	argTest PersonTestArg,
) Person {
	return Person{
		firstName: argFirstName.Arg,
		lastName:  argLastName.Arg,
		Age:       argAge.Arg,
		zz:        argZz.Arg,
		test:      argTest.Arg,
	}
}
