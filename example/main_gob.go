// Code generated by gobetter; DO NOT EDIT.

package example

import (
	"strings"
)

// PersonFirstNameArg represents field FirstName of struct Person
type PersonFirstNameArg struct {
	Arg string
}

// PersonFirstName creates argument for field FirstName
func PersonFirstName(arg string) PersonFirstNameArg {
	return PersonFirstNameArg{Arg: arg}
}

// PersonLastNameArg represents field LastName of struct Person
type PersonLastNameArg struct {
	Arg string
}

// PersonLastName creates argument for field LastName
func PersonLastName(arg string) PersonLastNameArg {
	return PersonLastNameArg{Arg: arg}
}

// PersonAgeArg represents field Age of struct Person
type PersonAgeArg struct {
	Arg int
}

// PersonAge creates argument for field Age
func PersonAge(arg int) PersonAgeArg {
	return PersonAgeArg{Arg: arg}
}

// PersonZZArg represents field ZZ of struct Person
type PersonZZArg struct {
	Arg func(a1, a2 int, a3 *string) interface{}
}

// PersonZZ creates argument for field ZZ
func PersonZZ(arg func(a1, a2 int, a3 *string) interface{}) PersonZZArg {
	return PersonZZArg{Arg: arg}
}

// PersonTestArg represents field Test of struct Person
type PersonTestArg struct {
	Arg strings.Builder
}

// PersonTest creates argument for field Test
func PersonTest(arg strings.Builder) PersonTestArg {
	return PersonTestArg{Arg: arg}
}

// NewPerson creates new instance of Person struct
func NewPerson(
	argFirstName PersonFirstNameArg,
	argLastName PersonLastNameArg,
	argAge PersonAgeArg,
	argZZ PersonZZArg,
	argTest PersonTestArg,
) Person {
	return Person{
		FirstName: argFirstName.Arg,
		LastName:  argLastName.Arg,
		Age:       argAge.Arg,
		ZZ:        argZZ.Arg,
		Test:      argTest.Arg,
	}
}
