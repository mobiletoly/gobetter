package main

import (
	"fmt"
	"go/ast"
	"go/token"
	"regexp"
	"strings"
	"unicode"
)

type StructParser struct {
	fileSet            *token.FileSet
	fileContent        []byte
	whitespaceRegexp   *regexp.Regexp
	constructorRegexp  *regexp.Regexp
	flagOptionalRegexp *regexp.Regexp
	flagGetterRegexp   *regexp.Regexp
}

type GobBuilder struct {
	common          strings.Builder
	constructorDef  strings.Builder
	constructorBody strings.Builder
	getters         strings.Builder
	astFile         *ast.File
}

func (bld *GobBuilder) appendPackage() {
	bld.common.WriteString("// Code generated by gobetter; DO NOT EDIT.\n\n")
	bld.common.WriteString(fmt.Sprintf("package %s\n\n", bld.astFile.Name.Name))
}

func (bld *GobBuilder) appendImports() {
	bld.common.WriteString("import (\n")
	for _, i := range bld.astFile.Imports {
		bld.common.WriteString(fmt.Sprintf("\t%s\n", i.Path.Value))
	}
	bld.common.WriteString(")\n\n")
}

func (bld *GobBuilder) appendArgStruct(structName string, fieldName string, fieldType string) (structArgName string) {
	structArgName = newStructArgName(structName, fieldName)
	bld.common.WriteString(fmt.Sprintf("// %s represents field %s of struct %s\n", structArgName, fieldName, structName))
	bld.common.WriteString(fmt.Sprintf("type %s struct {\n", structArgName))
	bld.common.WriteString(fmt.Sprintf("\tArg %s\n}\n", fieldType))
	bld.common.WriteString(fmt.Sprintf("// %s%s creates argument for field %s\n", structName, strings.Title(fieldName), fieldName))
	bld.common.WriteString(fmt.Sprintf("func %s_%s(arg %s) %s {\n", structName, strings.Title(fieldName),
		fieldType, structArgName))
	bld.common.WriteString(fmt.Sprintf("\treturn %s{Arg: arg}\n}\n\n", structArgName))
	return
}

func (bld *GobBuilder) appendArgStructConstructor(structName string, fieldName string, fieldType string) (structArgName string) {
	structArgName = newStructArgName(structName, fieldName)
	bld.common.WriteString(fmt.Sprintf("func %s%s(arg %s) %s {\n", structName, fieldName,
		fieldType, structArgName))
	bld.common.WriteString(fmt.Sprintf("\treturn %s{Arg: arg}\n}\n\n", structArgName))
	return
}

func newStructArgName(structName string, fieldName string) string {
	return structName + "_" + strings.Title(fieldName) + "_Arg"
}

func (bld *GobBuilder) appendBeginConstructorDef(structName string) {
	var funcName = ""
	firstChar := rune(structName[0])
	if unicode.IsLower(firstChar) {
		funcName = "new" + string(unicode.ToUpper(firstChar)) + structName[1:]
	} else {
		funcName = "New" + structName
	}
	bld.constructorDef.WriteString(fmt.Sprintf("// %s creates new instance of %s struct\n", funcName, structName))
	bld.constructorDef.WriteString(fmt.Sprintf("func %s(\n", funcName))
}

func (bld *GobBuilder) appendBeginConstructorBody(structName string) {
	bld.constructorBody.WriteString(fmt.Sprintf("\treturn %s{\n", structName))
}

func (bld *GobBuilder) appendConstructorArg(fieldName string, structArgName string) {
	argName := "arg" + strings.Title(fieldName)
	bld.constructorDef.WriteString(fmt.Sprintf("\t%s %s,\n", argName, structArgName))
	bld.constructorBody.WriteString(fmt.Sprintf("\t\t%s: %s.Arg,\n", fieldName, argName))
}

func (bld *GobBuilder) appendGetter(structName string, fieldName string, fieldType string) {
	bld.common.WriteString(fmt.Sprintf("func (v %s) %s() %s {\n", structName, strings.Title(fieldName), fieldType))
	bld.common.WriteString(fmt.Sprintf("\treturn v.%s\n", fieldName))
	bld.common.WriteString(fmt.Sprint("}\n\n"))
}

func (bld *GobBuilder) Build() string {
	return bld.common.String()
}

func (bld *GobBuilder) AcceptStruct(structName string) {
	if bld.getters.Len() > 0 {
		bld.common.WriteString(bld.getters.String())
		bld.common.WriteString("}\n")
	}
	if bld.constructorDef.Len() > 0 {
		bld.common.WriteString(bld.constructorDef.String())
		bld.common.WriteString(fmt.Sprintf(") %s {\n", structName))
		bld.common.WriteString(bld.constructorBody.String())
		bld.common.WriteString("\t}\n")
		bld.common.WriteString("}\n")
	}
	bld.constructorDef.Reset()
	bld.constructorBody.Reset()
	bld.getters.Reset()
}

func NewStructParser(fileSet *token.FileSet, fileContent []byte) StructParser {
	return StructParser{
		fileSet:            fileSet,
		fileContent:        fileContent,
		whitespaceRegexp:   regexp.MustCompile(`\s+`),
		constructorRegexp:  regexp.MustCompile("\\b+gob:constructor\\b"),
		flagOptionalRegexp: regexp.MustCompile("\\b+gob:optional\\b"),
		flagGetterRegexp:   regexp.MustCompile("\\b+gob:getter\\b"),
	}
}

func (sp *StructParser) fieldTypeText(field *ast.Field) string {
	begin := sp.fileSet.Position(field.Type.Pos()).Offset
	end := sp.fileSet.Position(field.Type.End()).Offset
	return sp.whitespaceRegexp.ReplaceAllString(string(sp.fileContent[begin:end]), " ")
}

func (sp *StructParser) fieldOptional(field *ast.Field) bool {
	return sp.flagOptionalRegexp.MatchString(field.Comment.Text())
}

func (sp *StructParser) fieldGetter(field *ast.Field) bool {
	return sp.flagGetterRegexp.MatchString(field.Comment.Text())
}

func (sp *StructParser) constructorRequired(st *ast.StructType) bool {
	begin := st.Struct
	endLine := sp.fileSet.File(begin).Line(begin) + 1
	end := sp.fileSet.File(begin).LineStart(endLine)
	result := string(sp.fileContent[sp.fileSet.Position(begin).Offset:sp.fileSet.Position(end).Offset])
	return sp.constructorRegexp.MatchString(result)
}
